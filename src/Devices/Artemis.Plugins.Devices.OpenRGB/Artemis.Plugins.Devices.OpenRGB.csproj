<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net5.0-windows</TargetFramework>
    <ShouldIncludeNativeSkiaSharp>false</ShouldIncludeNativeSkiaSharp>
    <AssemblyName>Artemis.Plugins.Devices.OpenRGB</AssemblyName>
    <RootNamespace>Artemis.Plugins.Devices.OpenRGB</RootNamespace>
    <Platforms>x64</Platforms>
    <GenerateDependencyFile>False</GenerateDependencyFile>
    <ProduceReferenceAssembly>False</ProduceReferenceAssembly>
    <UseWPF>true</UseWPF>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <PlatformTarget>x64</PlatformTarget>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="FluentValidation" Version="10.2.3" PrivateAssets="All" />
    <PackageReference Include="MaterialDesignExtensions" Version="3.3.0" PrivateAssets="All" />
    <PackageReference Include="MaterialDesignThemes" Version="4.1.0" PrivateAssets="All" />
    <PackageReference Include="Serilog" Version="2.10.0" PrivateAssets="All" />
    <PackageReference Include="SkiaSharp" Version="2.80.2" PrivateAssets="All" />
    <PackageReference Include="Stylet" Version="1.3.6" PrivateAssets="All" />
    <PackageReference Include="OpenRGB.NET" Version="1.7.0" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Artemis.Core">
      <HintPath>..\..\..\..\Artemis\src\Artemis.UI\bin\net5.0-windows\Artemis.Core.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="Artemis.UI.Shared">
      <HintPath>..\..\..\..\Artemis\src\Artemis.UI\bin\net5.0-windows\Artemis.UI.Shared.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="RGB.NET.Core">
      <HintPath>..\..\..\..\RGB.NET\bin\net5.0\RGB.NET.Core.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="RGB.NET.Devices.OpenRGB">
      <HintPath>RGB.NET.Devices.OpenRGB.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <Page Include="Properties\DesignTimeResources.xaml" Condition="'$(DesignTime)'=='true'">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
      <ContainsDesignTimeResources>true</ContainsDesignTimeResources>
    </Page>
  </ItemGroup>

  <ItemGroup>
    <None Update="OpenRGB.svg">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="OpenRGBConfigurationDialogView.xaml">
      <Generator>MSBuild:Compile</Generator>
    </None>
    <None Update="plugin.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <Content Include="Layouts\**">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="Images\**">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

	<ItemGroup>
		<PluginJson Include="plugin.json" />
	</ItemGroup>

	<UsingTask TaskName="GetPluginPath" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<AssemblyName ParameterType="System.String" Required="true" />
			<Json ParameterType="System.String" Required="true" />
			<PluginPath ParameterType="System.String" Output="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="C#">
				<![CDATA[
				Match guidMatch = Regex.Match(Json, "\"Guid\": \"([^\"]+)\"");
				string guid = guidMatch.Groups.Count > 1 ? guidMatch.Groups[1].Value.Substring(0, 8) : "ffffffff";
				PluginPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), "Artemis", "plugins", AssemblyName + "-" + guid);
				]]>
			</Code>
		</Task>
	</UsingTask>

	<!-- This may trigger another build (something related to the obj folder) so only run it if building inside VS -->
	<Target Name="PostBuildPublish" AfterTargets="PostBuildEvent" Condition="'$(BuildingInsideVisualStudio)' == 'true'">
		<!-- Determine the file path based on plugin.json contents -->
		<ReadLinesFromFile File="@(PluginJson)">
			<Output TaskParameter="Lines" ItemName="JsonContents" />
		</ReadLinesFromFile>
		<GetPluginPath AssemblyName="$(AssemblyName)" Json="@(JsonContents)">
			<Output TaskParameter="PluginPath" PropertyName="PluginPath" />
		</GetPluginPath>

		<Message Text="------ Artemis plugin publish ------" Importance="High" />
		<Exec Command="dotnet publish --verbosity q --output &quot;$(PluginPath)&quot;" />
		<Message Text="Published $(ProjectName) at file:\\$(PluginPath)" Importance="High" />
		<Message Text="If distributing outside the workshop, share this folder." Importance="High" />
	</Target>

	<!-- Override the published DLLs with the built DLLs to enable edit & continue -->
	<Target Name="PostBuildLocalDlls" AfterTargets="PostBuildEvent" Condition="'$(BuildingInsideVisualStudio)' == 'true'">
		<ItemGroup>
			<DllFiles Include="$(TargetDir)\**\*.dll" />
		</ItemGroup>
		<Copy SourceFiles="@(DllFiles)" DestinationFolder="$(PluginPath)" />
	</Target>
</Project>